name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  UV_SYSTEM_PYTHON: "1"

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  # Validate release tag
  validate:
    name: 🏷️ Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      prerelease: ${{ steps.get-version.outputs.prerelease }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          fetch-depth: 0

      - name: 🏷️ Get version info
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          # Validate tag format
          if ! [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid tag format: $TAG"
            echo "Expected: v1.2.3 or v1.2.3-beta1"
            exit 1
          fi

          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if prerelease
          if [[ "$TAG" =~ -[a-zA-Z0-9]+$ ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "📦 Pre-release version: $VERSION"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "📦 Release version: $VERSION"
          fi

  # Run full test suite
  test:
    name: 🧪 Release Tests
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: 🐍 Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: "3.12"

      - name: 🧪 Run tests
        uses: ./.github/actions/run-tests
        with:
          python-version: "3.12"
          coverage-enabled: "true"
          coverage-fail-under: "80"

      - name: 🔒 Security scan
        uses: ./.github/actions/security-scan
        with:
          fail-on-vulnerability: "true"

  # Build release artifacts
  build:
    name: 📦 Build Release
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: "3.12"
          install-dependencies: "false"

      - name: 🏗️ Build package
        run: |
          # Ensure version matches tag
          echo "Building version ${{ needs.validate.outputs.version }}"
          uv build --wheel --sdist

      - name: 📋 Validate package
        run: |
          uv run --with twine twine check dist/* --strict

          # Verify version in package
          WHEEL_VERSION=$(ls dist/*.whl | sed -E 's/.*-([0-9]+\.[0-9]+\.[0-9]+.*)-py3-none-any\.whl/\1/')
          if [[ "$WHEEL_VERSION" != "${{ needs.validate.outputs.version }}" ]]; then
            echo "❌ Version mismatch! Tag: ${{ needs.validate.outputs.version }}, Package: $WHEEL_VERSION"
            exit 1
          fi

      - name: 🔐 Generate attestations
        uses: actions/attest-build-provenance@310b0a4a3b0b78ef57ecda988ee04b132db73ef8  # v1.4.3
        with:
          subject-path: 'dist/*'

      - name: 📤 Upload release artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
        with:
          name: release-artifacts-${{ needs.validate.outputs.version }}
          path: dist/
          retention-days: 90
          if-no-files-found: error

  # Create GitHub release
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: "3.12"

      - name: 📥 Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
        with:
          name: release-artifacts-${{ needs.validate.outputs.version }}
          path: dist/

      - name: 📝 Generate release notes
        id: release-notes
        run: |
          # Use the auto-release-note-generation tool itself!
          echo "Generating release notes..."
          uv run auto-release-note-generation \
            --version "v${{ needs.validate.outputs.version }}" \
            --output release-notes.md

      - name: 🚀 Create GitHub release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191  # v2.0.8
        with:
          name: "v${{ needs.validate.outputs.version }}"
          body_path: release-notes.md
          prerelease: ${{ needs.validate.outputs.prerelease }}
          files: dist/*
          fail_on_unmatched_files: true
          generate_release_notes: false  # We generate our own

  # Publish to PyPI (optional - uncomment when ready)
  # publish:
  #   name: 📦 Publish to PyPI
  #   runs-on: ubuntu-latest
  #   needs: [validate, release]
  #   if: needs.validate.outputs.prerelease == 'false'
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/project/auto-release-note-generation/
  #   steps:
  #     - name: 📥 Download artifacts
  #       uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
  #       with:
  #         name: release-artifacts-${{ needs.validate.outputs.version }}
  #         path: dist/
  #
  #     - name: 📦 Publish to PyPI
  #       uses: pypa/gh-action-pypi-publish@f7600683efdcb7656dec5b29656edb7bc586e597  # v1.10.3
  #       with:
  #         attestations: true

  # Summary
  release-complete:
    name: ✅ Release Complete
    if: always()
    needs: [validate, test, build, release]
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Generate summary
        run: |
          echo "# Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release:** ${{ needs.validate.outputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release | ${{ needs.release.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.release.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Release v${{ needs.validate.outputs.version }} created successfully!**" >> $GITHUB_STEP_SUMMARY
          fi
