name: Main Branch CI

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with debug logging'
        required: false
        default: false

# Prevent concurrent runs on the same branch
concurrency:
  group: main-ci-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel main branch builds

env:
  # Global environment variables
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  # UV specific
  UV_SYSTEM_PYTHON: "1"

permissions:
  contents: read
  id-token: write  # For attestations
  attestations: write
  security-events: write
  actions: read

jobs:
  # Security scan with CodeQL
  security-analysis:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@4dd16135b69a43b6c8efb853346f8437d92d3c93  # v3.26.6
        with:
          languages: 'python,javascript'
          queries: security-and-quality

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4dd16135b69a43b6c8efb853346f8437d92d3c93  # v3.26.6

  # Full test matrix
  test-matrix:
    name: 🧪 Test (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest]
        include:
          # Additional OS testing for latest Python
          - python-version: "3.13"
            os: macos-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: 🐍 Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ matrix.python-version }}
          cache-key-suffix: "test-${{ matrix.os }}"

      - name: 🧪 Run tests
        uses: ./.github/actions/run-tests
        with:
          python-version: ${{ matrix.python-version }}
          os: ${{ matrix.os }}
          coverage-enabled: ${{ matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest' }}

  # Coverage analysis and reporting
  coverage:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    needs: [test-matrix]
    if: always() && needs.test-matrix.result == 'success'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: 🐍 Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: "3.12"
          cache-key-suffix: "coverage"

      - name: 🧪 Run tests with full coverage
        uses: ./.github/actions/run-tests
        with:
          python-version: "3.12"
          os: "ubuntu-latest"
          coverage-enabled: "true"
          coverage-fail-under: "80"
          test-flags: "--cov-config=pyproject.toml"
          artifact-suffix: "full-coverage"

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24  # v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-main
          fail_ci_if_error: false

  # Build and validate package
  build:
    name: 📦 Build & Validate
    runs-on: ubuntu-latest
    needs: [test-matrix]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          fetch-depth: 0  # Need full history for versioning

      - name: 🐍 Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: "3.12"
          cache-key-suffix: "build"
          install-dependencies: "false"  # Don't need deps for building

      - name: 🏗️ Build package
        run: |
          uv build --wheel --sdist
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/ | awk 'NR>1 {print "| " $9 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY

      - name: 📋 Check package metadata
        run: |
          uv run --with twine twine check dist/* --strict

      - name: 🧪 Test package installation
        run: |
          # Test wheel installation
          uv venv test-wheel --python 3.12
          uv pip install --python test-wheel/bin/python dist/*.whl
          test-wheel/bin/python -c "import auto_release_note_generation; print(f'✅ Version: {auto_release_note_generation.__version__}')"

          # Test sdist installation
          uv venv test-sdist --python 3.12
          uv pip install --python test-sdist/bin/python dist/*.tar.gz
          test-sdist/bin/python -c "import auto_release_note_generation; print(f'✅ Version: {auto_release_note_generation.__version__}')"

      - name: 🔐 Generate build provenance attestations
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be  # v1.4.3
        with:
          subject-path: 'dist/*'

      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
        with:
          name: distribution-packages-${{ github.sha }}-${{ github.run_id }}-${{ github.job }}-${{ github.run_attempt }}
          path: dist/
          retention-days: 90
          if-no-files-found: error

  # Summary
  main-ci-complete:
    name: ✅ Main CI Complete
    if: always()
    needs: [security-analysis, test-matrix, coverage, build]
    runs-on: ubuntu-latest
    steps:
      - name: 🎉 Check overall status
        run: |
          # Check critical job results
          if [[ "${{ needs.security-analysis.result }}" == "failure" ]] || \
             [[ "${{ needs.test-matrix.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed!"
            exit 1
          else
            echo "✅ All critical jobs passed!"
          fi

      - name: 📊 Generate summary
        if: always()
        run: |
          echo "# Main Branch CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Analysis | ${{ needs.security-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
