name: Reusable Build Workflow

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version for building'
        required: false
        type: string
        default: '3.12'
      validate-installation:
        description: 'Test package installation after build'
        required: false
        type: boolean
        default: true
      generate-attestations:
        description: 'Generate build attestations'
        required: false
        type: boolean
        default: true
      upload-artifacts:
        description: 'Upload build artifacts'
        required: false
        type: boolean
        default: true
      artifact-retention-days:
        description: 'Retention days for artifacts'
        required: false
        type: number
        default: 90
      runner-size:
        description: 'GitHub runner size'
        required: false
        type: string
        default: 'ubuntu-latest'
    outputs:
      package-version:
        description: 'Built package version'
        value: ${{ jobs.build.outputs.version }}
      artifact-name:
        description: 'Build artifact name'
        value: ${{ jobs.build.outputs.artifact }}

env:
  PYTHONUNBUFFERED: "1"
  UV_SYSTEM_PYTHON: "1"

permissions:
  contents: read
  id-token: write
  attestations: write

jobs:
  build:
    name: 📦 Build Package
    runs-on: ${{ inputs.runner-size }}
    outputs:
      version: ${{ steps.metadata.outputs.version }}
      artifact: distribution-${{ github.sha }}-${{ github.run_id }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          fetch-depth: 0  # Need full history for version detection

      - name: 🐍 Setup Python environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ inputs.python-version }}
          cache-key-suffix: build
          install-dependencies: 'false'  # Don't need deps for building

      - name: 📦 Build distribution packages
        run: |
          echo "📦 Building wheel and source distribution..."
          uv build --wheel --sdist

          echo "### Build Output" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/ | awk 'NR>1 {print "| " $9 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY

      - name: 📋 Extract package metadata
        id: metadata
        run: |
          # Extract version from built wheel
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          if [[ -n "$WHEEL_FILE" ]]; then
            # Extract version from wheel filename
            VERSION=$(echo "$WHEEL_FILE" | sed -E 's/.*-([0-9]+\.[0-9]+\.[0-9]+.*)-py[0-9]+-none-any\.whl/\1/')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "📦 Built version: $VERSION"
          else
            echo "❌ No wheel file found!"
            exit 1
          fi

      - name: 📋 Validate package metadata
        run: |
          echo "📋 Validating package metadata..."

          # Check with twine
          uv run --with twine twine check dist/* --strict

          # Additional metadata validation
          python -m zipfile -l dist/*.whl | head -20

          echo "✅ Package validation passed"

      - name: 🧪 Test package installation
        if: inputs.validate-installation
        run: |
          echo "🧪 Testing package installation..."

          # Test wheel installation
          echo "Testing wheel installation..."
          uv venv test-wheel --python ${{ inputs.python-version }}
          uv pip install --python test-wheel/bin/python dist/*.whl
          test-wheel/bin/python -c "import auto_release_note_generation; print(f'✅ Wheel installation successful: v{auto_release_note_generation.__version__}')"
          rm -rf test-wheel

          # Test source distribution installation
          echo "Testing sdist installation..."
          uv venv test-sdist --python ${{ inputs.python-version }}
          uv pip install --python test-sdist/bin/python dist/*.tar.gz
          test-sdist/bin/python -c "import auto_release_note_generation; print(f'✅ Source dist installation successful: v{auto_release_note_generation.__version__}')"
          rm -rf test-sdist

          echo "✅ All installation tests passed"

      - name: 🔐 Generate build provenance attestations
        if: inputs.generate-attestations
        uses: actions/attest-build-provenance@310b0a4a3b0b78ef57ecda988ee04b132db73ef8  # v1.4.3
        with:
          subject-path: 'dist/*'

      - name: 📊 Generate build report
        if: always()
        run: |
          echo "## 📦 Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.metadata.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Python:** ${{ inputs.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Attestations:** ${{ inputs.generate-attestations && '✅ Generated' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show package contents summary
          echo "### Package Contents" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          python -m zipfile -l dist/*.whl | grep -E '\.py$' | wc -l | xargs -I {} echo "Python files: {}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload build artifacts
        if: inputs.upload-artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # v4.4.0
        with:
          name: distribution-${{ github.sha }}-${{ github.run_id }}
          path: dist/
          retention-days: ${{ inputs.artifact-retention-days }}
          if-no-files-found: error
