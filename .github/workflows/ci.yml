name: CI

on:
  push:
    branches: [ main, develop, "release/**" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with debug logging'
        required: false
        default: false

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

env:
  # Global environment variables
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  UV_SYSTEM_PYTHON: "1"

permissions:
  contents: read
  pull-requests: write
  issues: write
  security-events: write
  id-token: write
  attestations: write

jobs:
  # Quick change detection to optimize CI runs
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docs: ${{ steps.filter.outputs.docs }}
      workflows: ${{ steps.filter.outputs.workflows }}
      dependencies: ${{ steps.filter.outputs.dependencies }}
      any: ${{ steps.filter.outputs.changes }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: 🔍 Path filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3.0.2
        id: filter
        with:
          filters: |
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'uv.lock'
            docs:
              - 'docs/**'
              - '*.md'
              - '*.rst'
            workflows:
              - '.github/workflows/**'
              - '.github/actions/**'
            dependencies:
              - 'pyproject.toml'
              - 'uv.lock'
              - 'requirements*.txt'

  # Run quality checks in parallel
  quality:
    name: 📋 Code Quality
    needs: [changes]
    if: needs.changes.outputs.python == 'true' || needs.changes.outputs.workflows == 'true'
    uses: ./.github/workflows/reusable-quality.yml
    with:
      python-version: '3.12'

  # Run security checks in parallel
  security:
    name: 🔒 Security Scan
    needs: [changes]
    if: needs.changes.outputs.python == 'true' || needs.changes.outputs.dependencies == 'true'
    uses: ./.github/workflows/reusable-security.yml
    with:
      python-version: '3.12'
      fail-on-vulnerability: ${{ github.event_name == 'pull_request' }}
      upload-sarif: true

  # Fast test on latest Python (for quick feedback)
  test-fast:
    name: 🚀 Fast Test
    needs: [changes]
    if: needs.changes.outputs.python == 'true'
    uses: ./.github/workflows/reusable-tests.yml
    with:
      python-version: '3.12'
      os: 'ubuntu-latest'
      coverage-enabled: true
      coverage-threshold: 80
      upload-coverage: ${{ github.ref == 'refs/heads/main' }}
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Full test matrix - runs in parallel with fast test
  test-matrix:
    name: 🧪 Test Matrix
    needs: [changes]
    if: |
      needs.changes.outputs.python == 'true' ||
      needs.changes.outputs.dependencies == 'true' ||
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/develop'
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        os: [ubuntu-latest]
        include:
          # Additional OS testing for latest Python
          - python-version: '3.13'
            os: macos-latest
          - python-version: '3.13'
            os: windows-latest
        exclude:
          # Skip 3.12 ubuntu as it's covered by fast test
          - python-version: '3.12'
            os: ubuntu-latest
    uses: ./.github/workflows/reusable-tests.yml
    with:
      python-version: ${{ matrix.python-version }}
      os: ${{ matrix.os }}
      coverage-enabled: false  # Only collect coverage in fast test

  # Build validation - can run in parallel with tests
  build:
    name: 📦 Build & Validate
    needs: [changes]
    if: |
      needs.changes.outputs.python == 'true' ||
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/develop' ||
      startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/reusable-build.yml
    with:
      python-version: '3.12'
      validate-installation: true
      generate-attestations: ${{ startsWith(github.ref, 'refs/tags/v') }}

  # Integration point - wait for all parallel jobs
  ci-status:
    name: 🎯 CI Status Check
    if: always()
    needs: [quality, security, test-fast, test-matrix, build]
    runs-on: ubuntu-latest
    steps:
      - name: 🎯 Check CI Status
        run: |
          # Collect job results
          FAILED_JOBS=""

          # Required jobs that must pass
          if [[ "${{ needs.quality.result }}" == "failure" ]]; then
            FAILED_JOBS="${FAILED_JOBS}quality "
          fi
          if [[ "${{ needs.security.result }}" == "failure" ]]; then
            FAILED_JOBS="${FAILED_JOBS}security "
          fi
          if [[ "${{ needs.test-fast.result }}" == "failure" ]]; then
            FAILED_JOBS="${FAILED_JOBS}test-fast "
          fi
          if [[ "${{ needs.test-matrix.result }}" == "failure" ]]; then
            FAILED_JOBS="${FAILED_JOBS}test-matrix "
          fi
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            FAILED_JOBS="${FAILED_JOBS}build "
          fi

          # Generate summary
          echo "# 📊 CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality.result }} | Linting, formatting, type checking |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} | Vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| Fast Test | ${{ needs.test-fast.result }} | Python 3.12 with coverage |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result }} | Multi-version/OS testing |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} | Package building & validation |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check overall status
          if [[ -n "$FAILED_JOBS" ]]; then
            echo "❌ **CI Failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Failed jobs: $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All CI checks passed!**" >> $GITHUB_STEP_SUMMARY

            # Add performance metrics
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚡ Performance Metrics" >> $GITHUB_STEP_SUMMARY
            echo "- **Total duration**: ~${{ github.run_number }} minutes" >> $GITHUB_STEP_SUMMARY
            echo "- **Parallel jobs**: 5" >> $GITHUB_STEP_SUMMARY
            echo "- **Matrix combinations**: ${{ strategy.job-total || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🏷️ Set PR labels
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            const labels = [];

            // Add status labels
            if ('${{ needs.quality.result }}' === 'success' &&
                '${{ needs.test-fast.result }}' === 'success') {
              labels.push('ci-passed');
            } else {
              labels.push('ci-failed');
            }

            // Add component labels based on changes
            if ('${{ needs.changes.outputs.docs }}' === 'true') {
              labels.push('documentation');
            }
            if ('${{ needs.changes.outputs.dependencies }}' === 'true') {
              labels.push('dependencies');
            }

            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }
