[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "auto-release-note-generation"
description = "An AI assisted tool for generating release-notes for git repositories."

# TODO(Optional): Better versioning strategy
# Consider semantic versioning: https://semver.org/
# For dynamic versioning, see: https://hatch.pypa.io/latest/version/#dynamic-versioning
version = "0.1.0"
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }

authors = [
    { name = "Arun Joseph", email = "arunjoseph.ai@gmail.com" },
]

# Main dependencies - pinned to major versions for compatibility
dependencies = [
    "gitpython>=3.1.0,<4.0.0",                 # Git interaction library
    "mcp>=1.10.0",                             # Model Context Protocol (security fix GHSA-j975-95f5-7wqh)
    "pydantic>=2.0.0,<3.0.0",                  # Data modeling and validation
    "pydantic-ai>=0.1.0,<1.0.0",               # Pydantic AI integration for AI-assisted features
    "rich>=13.0.0,<14.0.0",                    # Rich terminal output for better CLI UX
    "urllib3>=2.5.0,<3.0.0",                   # HTTP library (pinned for security fix CVE-2025-50181, CVE-2025-50182)
]

# PyPI metadata for better discoverability
keywords = ["git", "release-notes", "automation", "ai", "changelog", "devtools"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Build Tools",
]

[project.urls]
Homepage = "https://github.com/AIWorldTakeover/auto-release-note-generation"
Repository = "https://github.com/AIWorldTakeover/auto-release-note-generation"
Issues = "https://github.com/AIWorldTakeover/auto-release-note-generation/issues"
Documentation = "https://github.com/AIWorldTakeover/auto-release-note-generation#readme"

[project.optional-dependencies]
dev = [
    # Code formatting and linting
    "ruff>=0.6.0,<1.0.0",                      # Fast Python linter and formatter

    # Type checking
    "mypy>=1.8.0,<2.0.0",                      # Static type checker

    # Testing framework and plugins
    "pytest>=8.0.0,<9.0.0",                    # Testing framework
    "pytest-cov>=4.0.0,<6.0.0",                # Coverage reporting
    "pytest-xdist>=3.3.0,<4.0.0",              # Parallel test execution
    "pytest-mock>=3.10.0,<4.0.0",              # Mocking utilities
    "hypothesis>=6.0.0,<7.0.0",                # Property-based testing

    # Development tools
    "pre-commit>=3.0.0,<4.0.0",                # Git hooks for quality checks
    "detect-secrets>=1.5.0,<2.0.0",            # Security secrets detection
    "pip-audit>=2.5.0,<3.0.0",                 # Dependency vulnerability auditing
    "bandit>=1.7.6,<2.0.0",                    # Security linting for Python code
    "interrogate>=1.7.0,<2.0.0",               # Docstring coverage checking

    # Jupyter notebook support (optional - only if using notebooks)
    "nbqa>=1.7.0,<2.0.0",                      # Quality assurance for notebooks
]

docs = [
    # Documentation generator and theme
    "sphinx>=7.0.0,<8.0.0",                    # Documentation generator
    "furo>=2024.1.29,<2025.0.0",               # Modern Sphinx theme

    # Sphinx extensions and plugins
    "myst-parser>=2.0.0,<3.0.0",               # Markdown support for Sphinx
    "sphinx-autodoc-typehints>=1.24.0,<2.0.0", # Better type hint docs
    "sphinx-pydantic>=0.1.0,<1.0.0",           # Pydantic model documentation
    "sphinx-autoapi>=3.0.0,<4.0.0",            # Auto-generate API docs
    "sphinx-copybutton>=0.5.0,<1.0.0",         # Copy code button
]

perf = [
    "pytest-benchmark>=4.0.0,<5.0.0",          # Performance benchmarking
]

all = [
    "auto-release-note-generation[dev,docs,perf]"
]

[tool.ruff]
# Ruff configuration for linting and formatting
# Documentation: https://docs.astral.sh/ruff/
# 88 is Black's default, 79 is PEP 8, 100-120 is common for modern projects
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    # Core Python style and syntax
    "E",        # pycodestyle errors
    "W",        # pycodestyle warnings
    "F",        # Pyflakes (undefined names, unused imports, etc.)

    # Code quality and modernization
    "UP",       # pyupgrade (modern Python syntax)
    "FURB",     # refurb (modernize code patterns)
    "RUF",      # Ruff-specific rules

    # Import organization and style
    "I",        # isort (import sorting)
    "ICN",      # flake8-import-conventions (standard import aliases)

    # Bug prevention and best practices
    "B",        # flake8-bugbear (common Python gotchas)
    "PIE",      # flake8-pie (miscellaneous good practices)
    "SIM",      # flake8-simplify (suggest simplifications)
    "C4",       # flake8-comprehensions (better list/dict comprehensions)
    "PERF",     # Perflint (performance anti-patterns)

    # Function and argument handling
    "ARG",      # flake8-unused-arguments
    "RET",      # flake8-return (return statement improvements)
    "RSE",      # flake8-raise (raise statement improvements)

    # Testing best practices
    "PT",       # flake8-pytest-style

    # Code formatting and style consistency
    "Q",        # flake8-quotes (consistent quote style)
    "PYI",      # flake8-pyi (stub file best practices)

    # Security (enable with caution, may have false positives)
    # "S",      # flake8-bandit (security testing)

    # Documentation and naming (optional - can be verbose)
    # "D",      # pydocstyle (docstring conventions)
    # "N",      # pep8-naming (naming conventions)
]

ignore = [
    # "E501",     # Line too long (handled by formatter)
    "RUF012",   # Mutable class attributes should be annotated with ClassVar
]

[tool.ruff.lint.per-file-ignores]

# # Allow print statements in scripts and CLI tools
# "scripts/*" = ["T20"]
# "*/cli.py" = ["T20"]

# Test-specific ignores
"tests/*" = [
    "S101",     # Allow assert statements in tests
    "ARG001",   # pytest fixtures often have unused args
]

# Allow star imports in __init__.py files
"*/__init__.py" = ["F401", "F403"]

# Import sorting configuration
[tool.ruff.lint.isort]
known-first-party = ["auto_release_note_generation"]
split-on-trailing-comma = true
force-single-line = false

# Docstring style configuration
[tool.ruff.lint.pydocstyle]
convention = "google"                    # google, numpy, or pep257

# Code formatting configuration
[tool.ruff.format]
quote-style = "double"                   # Python community standard (PEP 8)
indent-style = "space"                   # Python standard (PEP 8)
skip-magic-trailing-comma = false        # Helps with clean git diffs
line-ending = "auto"                     # Respects existing file line endings


[tool.pytest.ini_options]
# Pytest configuration for comprehensive testing
minversion = "8.0"

# Test execution options
addopts = [
    # Strict configuration
    "--strict-markers",                       # Only allow defined markers
    "--strict-config",                        # Validate configuration files

    # Coverage reporting
    "--cov=auto_release_note_generation",     # Coverage source
    "--cov-report=term-missing",              # Show missing lines in terminal
    "--cov-report=html",                      # Generate HTML coverage report
    "--cov-report=xml",                       # Generate XML for CI/CD systems
    "--cov-fail-under=80",                    # Fail if coverage below 80%

    # Test execution options
    "-ra",                                    # Show all test results
    "--tb=short",                             # Shorter traceback format
    "--numprocesses=auto",                    # Parallel execution (pytest-xdist)

    # Debugging options (uncomment when needed):
    # "-v",                                   # Verbose output
    # "-s",                                   # Don't capture output
    # "-x",                                   # Stop on first failure
]

# Test discovery configuration
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Custom test markers for better test organization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests for quick verification",
    "e2e: marks tests as end-to-end tests",
    "network: marks tests that require network access",
    "db: marks tests that require database access",
]


[tool.coverage.run]
# Coverage measurement configuration
source = ["src"]                    # Source directory to measure
branch = true                       # Enable branch coverage
relative_files = true               # Use relative paths for GitHub Actions compatibility

# Files and patterns to exclude from coverage
omit = [
    "*/tests/*",                    # Test files themselves
    "*/test_*",                     # Individual test files
    "*/__init__.py",                # Usually just imports
    "*/conftest.py",                # Pytest configuration
    "*/migrations/*",               # Database migrations (if applicable)
    "*/venv/*",                     # Virtual environments
    "*/.venv/*",                    # Virtual environments
]


[tool.coverage.report]
# Coverage reporting configuration
fail_under = 80                     # Minimum coverage percentage
show_missing = true                 # Show line numbers of missing coverage
skip_covered = false                # Show files with 100% coverage

exclude_lines = [
    # Standard exclusions
    "pragma: no cover",             # Explicit exclusion marker
    "def __repr__",                 # String representations
    "if __name__ == ['\"]__main__['\"]:",   # Script entry points

    # Type checking exclusions
    "class .*\\bProtocol\\):",      # Protocol definitions
    "@(abc\\.)?abstractmethod",     # Abstract methods
    "@overload",                    # Function overloads
]

# Sort coverage report by coverage percentage
sort = "Cover"

[tool.mypy]
# Static type checking configuration
# Documentation: https://mypy.readthedocs.io/
python_version = "3.10"
strict = true

# Additional strict options for type safety
warn_return_any = true              # Warn about functions returning Any
warn_unused_configs = true          # Warn about unused config options
disallow_untyped_defs = true        # Require type annotations
disallow_incomplete_defs = true     # Require complete type annotations
check_untyped_defs = true           # Type-check unannotated functions
disallow_untyped_decorators = true  # Require typed decorators
warn_redundant_casts = true         # Warn about unnecessary casts
warn_unused_ignores = true          # Warn about unused "type: ignore"
warn_no_return = true               # Warn about functions that don't return
warn_unreachable = true             # Warn about unreachable code

# TODO(Optional): Enable if you want stricter checking
# disallow_any_generics = true      # Disallow generic types without parameters
# disallow_subclassing_any = true   # Disallow subclassing Any
# no_implicit_optional = true       # Don't assume Optional for default None

# Improve developer experience
show_error_codes = true             # Show error codes for easier suppression
show_column_numbers = true          # Show column numbers in errors
color_output = true                 # Colorized output
pretty = true                       # Pretty-print error messages
error_summary = true                # Show error summary

# Performance optimizations
cache_dir = ".mypy_cache"
incremental = true

# Allow more lenient checking in test code
[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false       # Tests often have complex fixtures
disallow_untyped_decorators = false # pytest decorators are often untyped
warn_return_any = false             # Test functions often don't need strict returns

# Overrides for untyped third-party libraries
[[tool.mypy.overrides]]
module = [
    "pytest.*",
    "setuptools.*",
    "hypothesis.*",
]
ignore_missing_imports = true

# Documentation: https://hypothesis.readthedocs.io/
[tool.hypothesis]
max_examples = 100                  # Number of test cases to generate per test
deadline = 400                      # Time limit per test case (milliseconds)
verbosity = "normal"                # Output detail: quiet, normal, verbose

# TODO(Optional): Configure for CI/CD environments
# For CI, you might want consistent results:
# derandomize = true                # Use deterministic random seed
# print_blob = true                 # Print failed example for debugging

# TODO(Optional): Database configuration for example persistence
# database_file = ".hypothesis/examples.db"  # Store interesting examples

# TODO(Optional): Configure profiles for different testing scenarios
# [tool.hypothesis.profiles.ci]
# max_examples = 1000               # More thorough testing in CI
# deadline = 1000                   # Allow more time in CI
#
# [tool.hypothesis.profiles.dev]
# max_examples = 50                 # Faster feedback during development
# deadline = 200

[tool.bandit]
exclude_dirs = [
    "tests",
    ".venv",
]
skips = ["B101"]  # Skip assert_used test

confidence = "HIGH"  # Only report high-confidence issues
severity = "MEDIUM"  # Report medium and high severity issues
